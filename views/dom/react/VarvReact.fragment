import React from "react"
let {useMemo} = React;

if (!window.VarvScope) window.VarvScope = React.createContext([]);

export const Varv = (params)=&gt;{
    let [lookupResult,setLookupResult] = React.useState([]);
    let scope = React.useContext(VarvScope);

    function onResultsUpdated(scopes){
        setLookupResult(scopes);
    }

    React.useEffect(() =&gt; {
        const queryParser = new JSXQueryParseNode(params, onResultsUpdated); // STUB: maybe reuse?
        const view = queryParser.getView(document, scope);

        return () =&gt; {
            // TODO: Cleanup varv view
            view.destroy();
        };
    }, [params.concept, params.property, params.if, scope]);    

    return lookupResult.map(result=&gt;{
        if (result.length==0){
            return null;
        } else if (result[0].errorMessage){
            console.log(result[0].errorMessage,result[0].ex);
            return &lt;varv-failure&gt;{result[0].errorMessage}{result[0].ex.toString()}&lt;/varv-failure&gt;
        } else {
            return &lt;VarvScope.Provider key={result[0].uuid} value={[...scope,...result]}&gt;
                {params.children}
            &lt;/VarvScope.Provider&gt;
        }
    });
}

export function useProperty(lookup){
    let scope = React.useContext(VarvScope);
    let [value,setValue] = React.useState();
    let [binding,setBinding] = React.useState();

    // From React -&gt; Varv
    let storeValue = async function sendValueToVarv(value){
        await binding.setValueFor(lookup, value);
    }

    // Add a cleanup hook
    React.useEffect(() =&gt; {
        // Fetch the binding from Varv -&gt; React
        let binding = DOMView.getBindingFromScope(lookup, scope);
        if (!binding) throw new Error("Could not look up "+lookup+" in scope"+JSON.stringify(scope));
        let changeListener = binding.generateRawChangeListener(lookup, null);
        changeListener.onChanged = async function updateReactValueFromVarv(newValue){
            if (Array.isArray(newValue)){
                // Make sure not to send the original array as React will remember it and not see changes
                setValue(structuredClone(newValue));
            } else {
                setValue(newValue);
            }
        };

        // Enqueue initial value fetch
        binding.getValueFor(lookup).then((initialValue)=&gt;{
            setValue(initialValue);
        });
        setBinding(binding);

        return () =&gt; {
            if (changeListener && changeListener.destroy) changeListener.destroy();
        };
    }, []);

    return [value,storeValue];
}


export function useAction(lookup, actionArguments = {}){
    if (lookup.includes(".")) throw new Error("STUB: Only direct action names supported right now for useAction(), no fancy lookups");
    let scope = React.useContext(VarvScope);
    return (additionalActionArguments)=&gt;{
        // Lookup the action in scope                
        let target = null;
        for (let i = scope.length-1; i>=0; i--){
            let scopeEntry = scope[i];
            if (scopeEntry.concept){
                if (!target) target = scopeEntry.uuid;
                if (scopeEntry.concept.actions){ // TODO: Also consider other kinds of scopes instead of assuming only Concept/Property
                    let action = scopeEntry.concept.actions.get(lookup);
                    if (action) {
                        action.apply([{target:target}], {...actionArguments, ...additionalActionArguments});
                        return;
                    }
                }
            }
        }
        throw new Error("Unknown action "+lookup+" not found in scope");
    };
}

